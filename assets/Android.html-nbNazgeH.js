import{_ as d}from"./plugin-vue_export-helper-x3n3nnut.js";import{r,o as n,c as h,a,b as e,d as i,f as l}from"./app-302Urp1_.js";const o={},s=a("h2",{id:"android",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#android","aria-hidden":"true"},"#"),e(" Android")],-1),c={href:"https://www.bilibili.com/video/BV19U4y1R7zV/?p=1",target:"_blank",rel:"noopener noreferrer"},u={href:"https://developer.android.google.cn/courses",target:"_blank",rel:"noopener noreferrer"},p=l('<h3 id="_1-开发环境的搭建" tabindex="-1"><a class="header-anchor" href="#_1-开发环境的搭建" aria-hidden="true">#</a> 1. 开发环境的搭建</h3><p>介绍Android、 工具AndroidStudio的下载安装、 配置下载SDK、 基本使用-创建项目， 使用内置模拟器、 查看运行日志、 及解决问题</p><h4 id="_01-前序" tabindex="-1"><a class="header-anchor" href="#_01-前序" aria-hidden="true">#</a> 01-前序</h4><p>安卓（Android）是一种<strong>基于Linux内核</strong>的 自由及开放源代码的操作系统 安装 Android Studio 创建、运行、调式App工程</p><h4 id="_02-android发展历程" tabindex="-1"><a class="header-anchor" href="#_02-android发展历程" aria-hidden="true">#</a> 02-Android发展历程</h4><p>200508谷歌收购出资，AndyRubin开发的，2011超过塞班系统</p><h5 id="android发布版本" tabindex="-1"><a class="header-anchor" href="#android发布版本" aria-hidden="true">#</a> Android发布版本</h5><p>每年一个大版本 Android13 202202</p><h5 id="androidstudio发展历程" tabindex="-1"><a class="header-anchor" href="#androidstudio发展历程" aria-hidden="true">#</a> AndroidStudio发展历程</h5><p>2013年谷歌推出基于IntellijIDEA演变而来， 之前用Eclipse来开发 201305 AndroidStudio1.0 。。。 202005 AndroidStudio4.0 后来用昆虫动物命名</p><h4 id="_03-android开发机器配置要求" tabindex="-1"><a class="header-anchor" href="#_03-android开发机器配置要求" aria-hidden="true">#</a> 03-Android开发机器配置要求</h4><p>16G甚至32G内存</p><h5 id="硬件" tabindex="-1"><a class="header-anchor" href="#硬件" aria-hidden="true">#</a> 硬件：</h5><p>至少8G 1.5GHz 10G硬盘 USB插槽甚至无线网卡</p><h5 id="软件" tabindex="-1"><a class="header-anchor" href="#软件" aria-hidden="true">#</a> 软件：</h5><p>至少Windows7 64位</p><h4 id="_04-android-studio与sdk下载安装" tabindex="-1"><a class="header-anchor" href="#_04-android-studio与sdk下载安装" aria-hidden="true">#</a> 04-Android Studio与SDK下载安装</h4>',17),x={href:"https://developer.android.google.cn/studio",target:"_blank",rel:"noopener noreferrer"},g=l(`<h5 id="下载后安装" tabindex="-1"><a class="header-anchor" href="#下载后安装" aria-hidden="true">#</a> 下载后安装</h5><p>中间sdk暂时跳过</p><h5 id="下载sdk" tabindex="-1"><a class="header-anchor" href="#下载sdk" aria-hidden="true">#</a> 下载SDK</h5><p>Software Development Kit 软件开发包 将app源码编译为可执行app应用</p><h4 id="_05-创建工程与创建模拟器" tabindex="-1"><a class="header-anchor" href="#_05-创建工程与创建模拟器" aria-hidden="true">#</a> 05-创建工程与创建模拟器</h4><h5 id="新建工程-空activity" tabindex="-1"><a class="header-anchor" href="#新建工程-空activity" aria-hidden="true">#</a> 新建工程-空activity</h5><h5 id="创建内置模拟器" tabindex="-1"><a class="header-anchor" href="#创建内置模拟器" aria-hidden="true">#</a> 创建内置模拟器</h5><p>AVD：Android Virtual Device</p><h4 id="_06-观察app运行日志" tabindex="-1"><a class="header-anchor" href="#_06-观察app运行日志" aria-hidden="true">#</a> 06-观察app运行日志</h4><p>Log工具</p><h5 id="日志级别" tabindex="-1"><a class="header-anchor" href="#日志级别" aria-hidden="true">#</a> 日志级别</h5><pre><code>从高到低
</code></pre><p>Log.e error Log.w warn Log.i info Log.d dubug Log.v verbose 冗余的 能看到如上四个级别</p><h5 id="logcat窗口" tabindex="-1"><a class="header-anchor" href="#logcat窗口" aria-hidden="true">#</a> Logcat窗口</h5><p>创建过滤器、 设置优先级、 搜索日志 修改消息中显示的信息量、 异常-相关联的堆栈轨迹、 从 Android Studio 2.2 开始<strong>Run</strong> 窗口能看， 但是无法配置的</p><h4 id="_07-环境安装可能遇到的问题" tabindex="-1"><a class="header-anchor" href="#_07-环境安装可能遇到的问题" aria-hidden="true">#</a> 07-环境安装可能遇到的问题</h4><p>在windows或mac系统上，再开linux系统 需要一个虚拟化的支持</p><h5 id="bios-security-virtualization-enabled" tabindex="-1"><a class="header-anchor" href="#bios-security-virtualization-enabled" aria-hidden="true">#</a> BIOS Security Virtualization Enabled</h5><p>红米笔记本默认是开启的 虚拟机加速需要使用 Hypervisor</p><h5 id="其他问题看官网" tabindex="-1"><a class="header-anchor" href="#其他问题看官网" aria-hidden="true">#</a> 其他问题看官网</h5><h4 id="_08-小结-练习一下" tabindex="-1"><a class="header-anchor" href="#_08-小结-练习一下" aria-hidden="true">#</a> 08-小结-练习一下</h4><h3 id="_2-app开发基础" tabindex="-1"><a class="header-anchor" href="#_2-app开发基础" aria-hidden="true">#</a> 2. App开发基础</h3><ul><li>开发特点 <ul><li>运行环境-模拟器和真机</li><li>开发语言-官方 Java Kotlin 和 其他</li><li>连接数据库-内置 SQLite</li></ul></li><li>工程结构 <ul><li>目录结构</li><li>编译配置 build.gradle</li><li>运行配置 AndroidMainfest.xml</li></ul></li><li>设计规范 <ul><li>界面设计-利用 XML 标记描绘应用界面</li><li>代码逻辑-使用 Java 代码书写程序逻辑</li></ul></li><li>活动页面 <ul><li>创建一个界面</li><li>快速生成页面源码</li><li>页面跳转</li></ul></li></ul><h4 id="_09-运行使用真机调试" tabindex="-1"><a class="header-anchor" href="#_09-运行使用真机调试" aria-hidden="true">#</a> 09-运行使用真机调试</h4><p>连上线-有驱动-开发者-USB调试 1、插上usb线 2、电脑自动安装手机的驱动，失败就用第三方手机助手安装好手机的驱动 3、手机系统设置开发者选项，点击多次版本会开启 4、更多设置开发者选项里开启USB调试 原理是 ADB 连接，用手机助手容易占用 ADB 连接导致 AS 连不上手机 WIFI连接：同一无线网络，搭载的是 Android 11 或更高版本</p><h4 id="_10-开发涉及到的编程语言" tabindex="-1"><a class="header-anchor" href="#_10-开发涉及到的编程语言" aria-hidden="true">#</a> 10-开发涉及到的编程语言</h4><p>两大技术路线</p><h5 id="原生开发" tabindex="-1"><a class="header-anchor" href="#原生开发" aria-hidden="true">#</a> 原生开发</h5><p>好处是渲染快 Java 和 Kotlin</p><h5 id="混合开发" tabindex="-1"><a class="header-anchor" href="#混合开发" aria-hidden="true">#</a> 混合开发</h5><p>好处是不用总更新apk 跨端多平台</p><h5 id="其他语言" tabindex="-1"><a class="header-anchor" href="#其他语言" aria-hidden="true">#</a> 其他语言</h5><p>甚至为了性能还会使用 C++ 比如音视频图像处理 VDK 还有 XML 标记语言也能开发，这是命令式的，未来是声明式 UI 的天下</p><h5 id="数据库语言" tabindex="-1"><a class="header-anchor" href="#数据库语言" aria-hidden="true">#</a> 数据库语言？</h5><p>已经嵌入 SQLite 数据库语言，因本地省开销</p><h4 id="_11-工程目录结构" tabindex="-1"><a class="header-anchor" href="#_11-工程目录结构" aria-hidden="true">#</a> 11-工程目录结构</h4><p>项目-模块-结构目录 Gradle-依赖-打包-部署-各种渠道的差异管理</p><h4 id="_12-编译配置文件build-gradle" tabindex="-1"><a class="header-anchor" href="#_12-编译配置文件build-gradle" aria-hidden="true">#</a> 12-编译配置文件build.gradle</h4><p>编译 build 利用工具 gradle 构建</p><h5 id="项目级别" tabindex="-1"><a class="header-anchor" href="#项目级别" aria-hidden="true">#</a> 项目级别</h5><p>当前项目级别的编译规则</p><h5 id="模块级别" tabindex="-1"><a class="header-anchor" href="#模块级别" aria-hidden="true">#</a> 模块级别</h5><p>当前模块级别的编译规则</p><h5 id="版本兼容性" tabindex="-1"><a class="header-anchor" href="#版本兼容性" aria-hidden="true">#</a> 版本兼容性</h5><p>插件版本号 依赖版本号 Android Studio 版本 和 Gradle 版本 也是对应的 sdk 和 api 也是要大版本对应的 项目也有版本号</p><h4 id="_13-清单文件androidmanifest-xml" tabindex="-1"><a class="header-anchor" href="#_13-清单文件androidmanifest-xml" aria-hidden="true">#</a> 13-清单文件AndroidManifest.xml</h4><p>根目录必备。 App的<strong>配置信息</strong> 主启动 Activity</p><h4 id="_14-界面显示与逻辑处理" tabindex="-1"><a class="header-anchor" href="#_14-界面显示与逻辑处理" aria-hidden="true">#</a> 14-界面显示与逻辑处理</h4><p>界面设计 和 代码逻辑 分开：</p><ul><li>方便页面的预览，</li><li>方便页面的复用，</li><li>方便逻辑的复用</li></ul><h5 id="界面显示" tabindex="-1"><a class="header-anchor" href="#界面显示" aria-hidden="true">#</a> 界面显示</h5><p>利用XML标记描绘应用界面 相当于 web 的 html</p><h5 id="逻辑处理" tabindex="-1"><a class="header-anchor" href="#逻辑处理" aria-hidden="true">#</a> 逻辑处理</h5><p>使用Java代码书写程序逻辑 相当于 web 的 js</p><h4 id="_15-activity创建与跳转" tabindex="-1"><a class="header-anchor" href="#_15-activity创建与跳转" aria-hidden="true">#</a> 15-Activity创建与跳转</h4><h5 id="三个步骤" tabindex="-1"><a class="header-anchor" href="#三个步骤" aria-hidden="true">#</a> 三个步骤：</h5><ol><li>在 layout 目录下创建 XML 文件</li><li>创建与 XML 文件对应的 Java 代码</li><li>在 AndroidManifest.xml 中注册页面配置</li></ol><h5 id="快速生成页面源码" tabindex="-1"><a class="header-anchor" href="#快速生成页面源码" aria-hidden="true">#</a> 快速生成页面源码</h5><ul><li>右键New-Activity-Empty Activity</li></ul><h4 id="_16-小结-练习一下" tabindex="-1"><a class="header-anchor" href="#_16-小结-练习一下" aria-hidden="true">#</a> 16-小结-练习一下</h4><p>开发前的预备知识</p><h3 id="_3-简单控件" tabindex="-1"><a class="header-anchor" href="#_3-简单控件" aria-hidden="true">#</a> 3. 简单控件</h3><ul><li>文本显示 <ul><li>内容</li><li>大小</li><li>颜色、背景</li></ul></li><li>视图基础 <ul><li>宽高</li><li>间距</li><li>对齐方式</li></ul></li><li>常用布局 <ul><li>线性布局</li><li>相对布局</li><li>网格布局</li><li>滚动视图</li></ul></li><li>按钮触控 <ul><li>按钮空间 Button</li><li>点击事件和长按事件</li><li>禁用与恢复按钮</li></ul></li><li>图像显示 <ul><li>图像视图 ImageView</li><li>图像按钮 ImageButton</li><li>同时展示文本和图像</li></ul></li><li>小结-计算器</li></ul><h4 id="_17-设置文本的内容" tabindex="-1"><a class="header-anchor" href="#_17-设置文本的内容" aria-hidden="true">#</a> 17-设置文本的内容</h4><p>XML android:text Java setText</p><h4 id="_18-设置文本的大小" tabindex="-1"><a class="header-anchor" href="#_18-设置文本的大小" aria-hidden="true">#</a> 18-设置文本的大小</h4><p>Java setTextSize 默认单位 sp XML android:textSize 需要指定字号单位 px 与显屏分辨率有关 dp 只与屏幕尺寸有关 sp 跟随系统设置有关</p><h4 id="_19-设置文本的颜色" tabindex="-1"><a class="header-anchor" href="#_19-设置文本的颜色" aria-hidden="true">#</a> 19-设置文本的颜色</h4><p>Java setTextColor XML android:textColor 需要指定字号单位 三原色RGB 透明，Java 默认透明，XML 默认不透明 十六进制 0x， FF -越亮 越不透， 00 -越暗 越透明</p><h5 id="背景-background" tabindex="-1"><a class="header-anchor" href="#背景-background" aria-hidden="true">#</a> 背景 Background</h5><p>Java setBackgroundColor Java setBackgroundResource 来源于资源文件 XML android:background</p><h4 id="_20-设置视图的宽高" tabindex="-1"><a class="header-anchor" href="#_20-设置视图的宽高" aria-hidden="true">#</a> 20-设置视图的宽高</h4><h5 id="xml方式" tabindex="-1"><a class="header-anchor" href="#xml方式" aria-hidden="true">#</a> XML方式</h5><p>android:layout_width android:layout_height match_parent 与上级视图保持一致 warp_content 内容自适应 dp 单位</p><h5 id="java方式" tabindex="-1"><a class="header-anchor" href="#java方式" aria-hidden="true">#</a> Java方式</h5><p>单位默认是 px ，需借用工具类把dp转化成px值 首先确保 XML 的宽高属性是 <strong>wrap_content</strong> 调用控件对象的 <strong>getLayoutParams</strong> 方法，获取该空间的布局参数 修改布局参数的属性 width 宽度、 height 高度 调用控件对象的 <strong>setLayoutParams</strong> 方法，填入修改后的布局参数</p><h4 id="_21-设置视图的间距" tabindex="-1"><a class="header-anchor" href="#_21-设置视图的间距" aria-hidden="true">#</a> 21-设置视图的间距</h4><p>外间距 layout_margin 内间距 padding 含上下左右</p><h4 id="_22-设置视图的对齐方式" tabindex="-1"><a class="header-anchor" href="#_22-设置视图的对齐方式" aria-hidden="true">#</a> 22-设置视图的对齐方式</h4><h5 id="layout-gravity" tabindex="-1"><a class="header-anchor" href="#layout-gravity" aria-hidden="true">#</a> layout_gravity</h5><p>指定了当前视图相对于上级视图的对齐方式 为了适应阿拉伯从右往左，逐渐用start和end</p><h5 id="gravity" tabindex="-1"><a class="header-anchor" href="#gravity" aria-hidden="true">#</a> gravity</h5><p>指定了下级视图相对于当前视图的对齐方式 含上下左右 还可以用竖线连接，比如 left|top 表示即靠左又靠上</p><h4 id="_23-linearlayout" tabindex="-1"><a class="header-anchor" href="#_23-linearlayout" aria-hidden="true">#</a> 23-LinearLayout</h4><p>线性布局 默认 <strong>orientation</strong> 属性值为 <strong>horizontal</strong> 内部视图是 水平布局</p><h5 id="horizontal" tabindex="-1"><a class="header-anchor" href="#horizontal" aria-hidden="true">#</a> horizontal</h5><p>水平</p><h5 id="vertical" tabindex="-1"><a class="header-anchor" href="#vertical" aria-hidden="true">#</a> vertical</h5><p>垂直</p><h5 id="线性布局的权重" tabindex="-1"><a class="header-anchor" href="#线性布局的权重" aria-hidden="true">#</a> 线性布局的权重</h5><p>是线性布局的 下级视图 各自拥有多大比例的宽高 layout_weight 但该属性不再布局节点，而是在布局的下级视图来设置 layout_widht 填 0dp 时，layout_weight 表示水平方向的 宽度 比例 layout_height 填 0dp 时，layout_weight 表示垂直方向的 高度 比例</p><h4 id="_24-relativelayout" tabindex="-1"><a class="header-anchor" href="#_24-relativelayout" aria-hidden="true">#</a> 24-RelativeLayout</h4><p>相对布局 相对布局的下级视图由其他视图决定 用于确定下级视图位置的参照物分两种</p><ul><li>与该视图自身平级的视图</li><li>该视图的上级视图</li></ul><h4 id="_25-gridlayout" tabindex="-1"><a class="header-anchor" href="#_25-gridlayout" aria-hidden="true">#</a> 25-GridLayout</h4><p>网格布局支持多行多列的表格排列 默认从左到右、从上到下 columnCount 指定了网格的列数 rowCount 指定了网格的行数</p><h4 id="_26-scrollview" tabindex="-1"><a class="header-anchor" href="#_26-scrollview" aria-hidden="true">#</a> 26-ScrollView</h4><p>滚动视图</p><h5 id="scrollview" tabindex="-1"><a class="header-anchor" href="#scrollview" aria-hidden="true">#</a> ScrollView</h5><p>垂直方向的滚动 layout_width=match_parent,layout_height=wrap_content</p><h5 id="horizontalscrollview" tabindex="-1"><a class="header-anchor" href="#horizontalscrollview" aria-hidden="true">#</a> HorizontalScrollView</h5><p>水平方向的滚动 layout_height=match_parent,layout_width=wrap_content</p><h4 id="_27-button" tabindex="-1"><a class="header-anchor" href="#_27-button" aria-hidden="true">#</a> 27-Button</h4><p>Button 继承自 TextView</p><ul><li>默认的按钮背景</li><li>默认内部文本居中对齐</li><li>默认英文字母转化成大写</li></ul><p>两个属性：</p><ul><li>textAllCaps 默认 true，改成 false 就可以不做大写转化</li><li>onClick 接管点击动作的事件，此方法即将过时</li></ul><h4 id="_28-点击事件" tabindex="-1"><a class="header-anchor" href="#_28-点击事件" aria-hidden="true">#</a> 28-点击事件</h4><p>不推荐 xml 里 onClick 高耦合 推荐使用监听器写法， 可以写一个静态的内部类实现接口重写 onClick 方法 也可以匿名内部类</p><h5 id="监听器" tabindex="-1"><a class="header-anchor" href="#监听器" aria-hidden="true">#</a> 监听器</h5><p>专门监听控件的动作行为后触发开关执行对应代码逻辑</p><h5 id="点击监听" tabindex="-1"><a class="header-anchor" href="#点击监听" aria-hidden="true">#</a> 点击监听</h5><p>通过 setOnClickListener 来设置，按钮按住少于 500 毫秒会触发</p><h5 id="长按监听" tabindex="-1"><a class="header-anchor" href="#长按监听" aria-hidden="true">#</a> 长按监听</h5><p>通过 setOnLongClickListener 来设置，按钮被按住超过 500 毫秒会触发</p><h4 id="_29-长按点击事件" tabindex="-1"><a class="header-anchor" href="#_29-长按点击事件" aria-hidden="true">#</a> 29-长按点击事件</h4><p>监听器写法：</p><ul><li>可以写一个静态的内部类实现接口重写 onClick 方法</li><li>也可以匿名内部类重写 onClick 方法，甚至 lambda 表达式写法</li></ul><h4 id="_30-禁用与恢复按钮" tabindex="-1"><a class="header-anchor" href="#_30-禁用与恢复按钮" aria-hidden="true">#</a> 30-禁用与恢复按钮</h4><p>实际业务中按钮的两种状态 不可用按钮：按钮点击没反应，同时文字为灰色 可用按钮：允许点击触发事件，文字黑色 通过属性 <strong>enabled</strong> 控制，true正常，false不允许</p><h4 id="_31-imageview" tabindex="-1"><a class="header-anchor" href="#_31-imageview" aria-hidden="true">#</a> 31-ImageView</h4><p>图像视图展示的图像通常位于 res/drawable*** 目录</p><h5 id="设置图片的两种方式" tabindex="-1"><a class="header-anchor" href="#设置图片的两种方式" aria-hidden="true">#</a> 设置图片的两种方式</h5><p>XML android:src @drawable/不含扩展名的图片名 Java setImageResource R.drawable.不含扩展名的图片名</p><h5 id="缩放类型" tabindex="-1"><a class="header-anchor" href="#缩放类型" aria-hidden="true">#</a> 缩放类型</h5><p>scaleType 默认居中显示 fitCenter</p><h4 id="_32-imagebutton" tabindex="-1"><a class="header-anchor" href="#_32-imagebutton" aria-hidden="true">#</a> 32-ImageButton</h4><p>图像按钮，继承自 ImageView， 而非继承 Button Button 即可以显示文本又可以显示图片，ImageButton 只能显示图片 ImageButton 上的图片可以按比例缩放，而 Button 通过背景设置的图像会拉伸变形 Button 只能靠背景显示一张图片，而 ImageButton 可在前景和背景实现叠加效果 有些文本字符无法输入法打出来，就可以利用图片切图实现展示 Imagebutton 有默认按钮背景， ImageView 默认无背景 ImageButton 默认缩放类型为 center， 而 ImageView 默认缩放类型 fitCenter</p><h4 id="_33-同时展示文本与图像" tabindex="-1"><a class="header-anchor" href="#_33-同时展示文本与图像" aria-hidden="true">#</a> 33-同时展示文本与图像</h4><ol><li>利用 LinearLayout 对 ImageView 和 TextView 组合布局</li><li>通过 Button 的 drawable*** 属性设置文本周围的图标</li></ol><h4 id="_34-计算器-界面" tabindex="-1"><a class="header-anchor" href="#_34-计算器-界面" aria-hidden="true">#</a> 34-计算器-界面</h4><p>分析页面结构，总体分为两部分</p><ol><li>上方显示框 展示用户输入</li><li>下方按钮框 1-9+-*/=等按钮 分析各部分要用到的控件和如何实现</li></ol><h4 id="_35-计算器-逻辑" tabindex="-1"><a class="header-anchor" href="#_35-计算器-逻辑" aria-hidden="true">#</a> 35-计算器-逻辑</h4><h4 id="_36-小结" tabindex="-1"><a class="header-anchor" href="#_36-小结" aria-hidden="true">#</a> 36-小结</h4><p>四大组件</p><ul><li>activity 活动界面</li><li>service 服务</li><li>content provider 内容提供者</li><li>broadcast receiver 广播接收者</li></ul><h3 id="_4-activity" tabindex="-1"><a class="header-anchor" href="#_4-activity" aria-hidden="true">#</a> 4.activity</h3><p>Activity活动</p><ul><li>启停活动页面 <ul><li>Activity的启动和结束</li><li>Activity的生命周期</li><li>Activity的启动模式</li></ul></li><li>在活动之间传递消息 <ul><li>显式Intent和隐式Intent</li><li>向下一个Activity发送消息</li><li>向上一个Activity返回数据</li></ul></li><li>为活动补充附加信息 <ul><li>利用资源文件配置字符串</li><li>利用元数据传递配置信息</li><li>给应用页面注册快捷方式</li></ul></li></ul><h4 id="_37-activity启动与结束" tabindex="-1"><a class="header-anchor" href="#_37-activity启动与结束" aria-hidden="true">#</a> 37-Activity启动与结束</h4><ul><li>从当前页面跳转到新页面，跳转代码如下 <ul><li>startActivity（new Intent（源页面.this, 目标页面.class））;</li></ul></li><li>从当前页面返回上一个页面，相当于关闭当前页面，返回代码如下 <ul><li>finish（）； //结束当前活动的页面 页面栈</li></ul></li></ul><h4 id="_38-activity生命周期" tabindex="-1"><a class="header-anchor" href="#_38-activity生命周期" aria-hidden="true">#</a> 38-Activity生命周期</h4><p>生命周期就是从出到死的几种状态</p><h5 id="各状态对应的方法" tabindex="-1"><a class="header-anchor" href="#各状态对应的方法" aria-hidden="true">#</a> 各状态对应的方法</h5><ul><li>onCreate <ul><li>创建活动。页面布局加载进内存，进入初始状态。</li></ul></li><li>onStart <ul><li>开始活动。活动页面显示在屏幕，进入就绪状态。</li></ul></li><li>onResume <ul><li>恢复活动。活动页面允许能交互，进入活跃状态。</li><li>一般动画处理在这里开始，例如响应用户点击、输入等</li></ul></li><li>onPause <ul><li>暂停活动。无法与用户正常交互，进入暂停状态。</li><li>一般动画处理在这里结束。</li></ul></li><li>onStop <ul><li>停止活动。页面将不在屏幕显示，</li></ul></li><li>onDestroy <ul><li>销毁活动。回收活动占用的系统资源，把页面从内存中清除</li></ul></li><li>onRestart <ul><li>重启活动。重新加载内存中的页面数据。</li></ul></li><li>onNewIntent <ul><li>重用已有的活动实例。</li></ul></li></ul><h5 id="各状态之间切换过程" tabindex="-1"><a class="header-anchor" href="#各状态之间切换过程" aria-hidden="true">#</a> 各状态之间切换过程</h5><ul><li>打开新页面的方法调用顺序 <ul><li>不存在- onCreate -初始状态- onStart -就绪状态- onResume -活跃状态</li></ul></li><li>关闭旧页面的方法调用顺序 <ul><li>活跃状态- onPause -就绪状态- onStop -初始状态- onDestory -不存在</li></ul></li></ul><h4 id="_39-activity启动模式" tabindex="-1"><a class="header-anchor" href="#_39-activity启动模式" aria-hidden="true">#</a> 39-Activity启动模式</h4><p>Activity启动模式 就是 启动方式，压栈方式，也叫任务栈Task栈，</p><ul><li>可以设置多种启动模式</li><li>两种设置方法：XML 和 Java</li><li>两种方式配合使用，xml是已经配置好，Java是有需要的时候动态配置</li></ul><h5 id="xml" tabindex="-1"><a class="header-anchor" href="#xml" aria-hidden="true">#</a> XML</h5><p>XML android：launchMode 默认 standard 标准模式</p><h6 id="默认启动模式standard" tabindex="-1"><a class="header-anchor" href="#默认启动模式standard" aria-hidden="true">#</a> 默认启动模式standard</h6><p>标准</p><h6 id="栈顶复用模式singletop" tabindex="-1"><a class="header-anchor" href="#栈顶复用模式singletop" aria-hidden="true">#</a> 栈顶复用模式singleTOP</h6><p>栈顶复用</p><ul><li>适合开启渠道多、多应用开启调用的Activity，可避免已创建过的Activity被重复创建，多数通过动态设置使用</li></ul><h6 id="栈内复用模式singletask" tabindex="-1"><a class="header-anchor" href="#栈内复用模式singletask" aria-hidden="true">#</a> 栈内复用模式singleTask</h6><p>不是栈顶复用，而是栈内就有就复用，复用时会把这个上面的页面都弹出栈</p><ul><li>适合程序的主界面：肯定不希望主界面创建多次而且主界面退出能退出整个app是最好的效果</li><li>还适合耗费系统资源的Activity，能减少资源耗费</li></ul><h6 id="全局唯一模式singleinstance" tabindex="-1"><a class="header-anchor" href="#全局唯一模式singleinstance" aria-hidden="true">#</a> 全局唯一模式singleInstance</h6><p>会额外启动一个Task且栈内仅有一个页面， 额外的这个Task栈会成位前台栈， 其他Task栈保持不变，但会成后台栈， 每个Task栈返回到内空就会销毁</p><h5 id="java-动态设置启动模式" tabindex="-1"><a class="header-anchor" href="#java-动态设置启动模式" aria-hidden="true">#</a> Java 动态设置启动模式</h5><pre><code>new Intent(this, BActivity.class)
	.setFlags(
		Intent.FLAG_ACTIVITY_CLEAR_TASK
		|
		Intent.FLAG_ACTIVITY_NEW_TASK
	)
</code></pre><ul><li><strong>FLAG_ACTIVITY_NEW_TASK</strong><ul><li>开辟一个新的任务栈</li></ul></li><li><strong>FLAG_ACTIVITY_SINGLE_TASK</strong> *</li><li><strong>FLAG_ACTIVITY_CLEAR_TOP</strong><ul><li>当栈中不存在此实例，就压栈添加一个进去。</li><li>当栈中存在待跳转的活动实例时，则重新创建该活动实例，并清除原实例上所有实例 <ul><li>如同时设置 <strong>FLAG_ACTIVITY_SINGLE_TOP</strong>,则重用栈内</li><li>如没有同时设置，就销毁后重新创建</li></ul></li></ul></li><li><strong>FLAG_ACTIVITY_CLEAR_TASK</strong><ul><li>栈中原有实例都被清空，不过这也意味着当前栈没法用了，需要开辟新任务栈</li></ul></li><li><strong>FLAG_ACTIVITY_NO_HISTORY</strong><ul><li>栈中不保存新启动的活动实例</li></ul></li><li>按位运算符 <strong>|</strong><ul><li>0|0=0 * 0|1=1 * 1|0=1 * 1|1=1 *</li></ul></li></ul><h4 id="_40-显示intent和隐式intent" tabindex="-1"><a class="header-anchor" href="#_40-显示intent和隐式intent" aria-hidden="true">#</a> 40-显示Intent和隐式Intent</h4><p>Intent（意图）是各个组件之间信息沟通的桥梁，它用于Android各组件之间的通信，主要完成如下工作：</p><ul><li>标记本次通信请求从哪里来、到哪里去、要怎么走</li><li>发起方携带本次通信需要的数据内容，接收方从收到的意图中解析数据</li><li>发起方若想判断接收方的处理结果，意图就要负责让接收方传回应答的数据内容</li></ul><h5 id="intent的组成部分" tabindex="-1"><a class="header-anchor" href="#intent的组成部分" aria-hidden="true">#</a> Intent的组成部分</h5><table><thead><tr><th style="text-align:left;">元素名称</th><th style="text-align:left;">设置方法</th><th style="text-align:left;">说明与用途</th></tr></thead><tbody><tr><td style="text-align:left;">Compent</td><td style="text-align:left;">setComponent</td><td style="text-align:left;">组件，它指示意图的来源与目标</td></tr><tr><td style="text-align:left;">Action</td><td style="text-align:left;">setAction</td><td style="text-align:left;">动作，它指示意图的动作行为</td></tr><tr><td style="text-align:left;">Date</td><td style="text-align:left;">setDate</td><td style="text-align:left;">即Uri，它指示动作要操作的数据路径</td></tr><tr><td style="text-align:left;">Category</td><td style="text-align:left;">addCategory</td><td style="text-align:left;">类别，它指示意图的操作类型</td></tr><tr><td style="text-align:left;">Type</td><td style="text-align:left;">setType</td><td style="text-align:left;">数据类型，它指示消息的数据类型</td></tr><tr><td style="text-align:left;">Extras</td><td style="text-align:left;">putExtras</td><td style="text-align:left;">扩展信息，它指示装载的包裹信息</td></tr><tr><td style="text-align:left;">Flags</td><td style="text-align:left;">setFlags</td><td style="text-align:left;">标志位，它指示活动的启动标志</td></tr></tbody></table><h5 id="显示intent" tabindex="-1"><a class="header-anchor" href="#显示intent" aria-hidden="true">#</a> 显示Intent</h5><p>显示Intent，直接指定来源活动与目标活动， 属于精准匹配。它有三种构建方式：</p><ol><li>Intent构造函数 Intent intent = new Intent(this, TagActivity.class);</li><li>Intent的setClass方法 intent.setClass(this, TagActivity.class);</li><li>调用意图对象的setComponent方法 ComponentName c = new ComponentName(this, TagActivity.class); ComponentName c = new ComponentName(&quot;包名&quot;, &quot;类名&quot;); intent.setComponent(this, TagActivity.class); startActivity(intent);</li></ol><h5 id="隐式intent" tabindex="-1"><a class="header-anchor" href="#隐式intent" aria-hidden="true">#</a> 隐式Intent</h5><p>没有明确指定要跳转的目标活动，只给出一个动作字符串让系统自动匹配， 属于模糊匹配。常见的系统动作：</p><table><thead><tr><th style="text-align:left;">系统动作常量名</th><th style="text-align:left;">系统动作的常量值</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">ACTION_MAIN</td><td style="text-align:left;">android.intent.action.MAIN</td><td style="text-align:left;">App启动时的入口</td></tr><tr><td style="text-align:left;">ACTION_VIEW</td><td style="text-align:left;">android.intent.action.VIEW</td><td style="text-align:left;">向用户显示数据</td></tr><tr><td style="text-align:left;">ACTION_SEND</td><td style="text-align:left;">android.intent.action.SEND</td><td style="text-align:left;">分享内容</td></tr><tr><td style="text-align:left;">ACTION_CALL</td><td style="text-align:left;">android.intent.action.CALL</td><td style="text-align:left;">直接拨号</td></tr><tr><td style="text-align:left;">ACTION_DIAL</td><td style="text-align:left;">android.intent.action.DIAL</td><td style="text-align:left;">准备拨号</td></tr><tr><td style="text-align:left;">ACTION_SENDTO</td><td style="text-align:left;">android.intent.action.SENDTO</td><td style="text-align:left;">发送短信</td></tr><tr><td style="text-align:left;">ACTION_ANSWER</td><td style="text-align:left;">android.intent.action.ANSWER</td><td style="text-align:left;">接听电话</td></tr></tbody></table><p>Intent intent = new Intent(); // 举例1 设置 意图动作是 拨号 String phoneNo = &quot;123456&quot;; intent.setAction(Intent.ACTION_DIAL); Uri uri = Uri.parse(&quot;tel:&quot; + phoneNo); // 举例2 设置 意图动作是 发短信 intent.setAction(Intent.ACTION_SENDTO); Uri uri = Uri.parse(&quot;smato:&quot; + phoneNo); intent.setData(uri); // 举例3 设置 意图动作是 跳到其他自己的应用 // 目标应用的xml的activity设置exported=&quot;true&quot;, 并设置intent-filter的action和category // 如果有多个应用会提示让选一个 intent.setAction(&quot;my action name&quot;) intent.setCategory(Intent.CATEGORY_DEFAULT); startActivity(intent);</p><h4 id="_41-向下一个activity发送数据" tabindex="-1"><a class="header-anchor" href="#_41-向下一个activity发送数据" aria-hidden="true">#</a> 41-向下一个Activity发送数据</h4><p>Intent 使用 Bundle 对象存放待传递的数据消息 Bundle 对象类似JOSNObject 有getInt putInt 发送消息包裹，调用意图对象的putExtras方法，即可存入消息包裹。 接收消息包裹，调用意图对象的getExtras方法，即可取出消息包裹。</p><h4 id="_42-向上一个activity返回数据" tabindex="-1"><a class="header-anchor" href="#_42-向上一个activity返回数据" aria-hidden="true">#</a> 42-向上一个Activity返回数据</h4><p>步骤：</p><ul><li>上一个页面打包好请求数据，调用startActivityForResult方法执行跳转动作</li><li>下一个页面接收并解析请求数据，进行相应处理</li><li>下一个页面在返回上一个页面时，打包应答数据并调setResult方法返回数据包裹</li><li>上一个页面重写方法onActivityResult,解析获得下一个页面的返回数据 onActivityResult过时了用registerForActivityResult</li></ul><h4 id="_43-利用资源文件配置字符串" tabindex="-1"><a class="header-anchor" href="#_43-利用资源文件配置字符串" aria-hidden="true">#</a> 43-利用资源文件配置字符串</h4><p>xml文件不需要编译，比较灵活</p><h4 id="_44-利用元数据传递配置信息" tabindex="-1"><a class="header-anchor" href="#_44-利用元数据传递配置信息" aria-hidden="true">#</a> 44-利用元数据传递配置信息</h4><p>比如用第三方的sdk，高德地图、友盟、微信登陆等会给一个Token用于人家的验证 getPackageManage().getActivityInfo(getComponentName(), PackageManager.GET_META_DATA).metaData.getString(&quot;XxxsdkName&quot;);</p><h4 id="_45-给应用页面注册快捷方式" tabindex="-1"><a class="header-anchor" href="#_45-给应用页面注册快捷方式" aria-hidden="true">#</a> 45-给应用页面注册快捷方式</h4><p>还能传递复杂的数据，7.0快捷方式菜单shortcuts.xml</p><h4 id="_46-小结" tabindex="-1"><a class="header-anchor" href="#_46-小结" aria-hidden="true">#</a> 46-小结</h4><h3 id="_5-中级控件" tabindex="-1"><a class="header-anchor" href="#_5-中级控件" aria-hidden="true">#</a> 5.中级控件</h3><p>常见的几种中级控件的用法，主要包括：如何定制几种简单的图形、如何使用几种选择按钮、如何高效的输入文本、如何利用对话框获取交互信息等</p><ul><li>图形定制 <ul><li>图形Drawable</li><li>形状图形</li><li>九宫格图片</li><li>状态列表图形</li></ul></li><li>选择按钮 <ul><li>复选框CheckBox</li><li>开关按钮Switch</li><li>单选按钮RadioButton</li></ul></li><li>文本输入 <ul><li>编辑框EditText</li><li>焦点变更监听器</li><li>文本变化监听器</li></ul></li><li>对话框 <ul><li>提醒对话框AlertDialog</li><li>日期对话框DatePickerDialog</li><li>时间对话框TimePickerDialog</li></ul></li></ul><h4 id="_47-图形drawable" tabindex="-1"><a class="header-anchor" href="#_47-图形drawable" aria-hidden="true">#</a> 47-图形Drawable</h4><p>能够显示的图形都抽象为Drawable类（可绘制的）。这里的图形不止是图片，还包括色块、画板、背景等 包含图片在内的图形文件放在res目录下的drawable目录下，其中drawable目录一般保存描述性的XML文件，而图片文件一般放在具体的分辨率drawable目录下，例如 drawable-ldpi 里放低分辨率dd的图片如240x320，现在基本没这低配手机。 drawable-mdpi 里放中等分辨率320x480，现在手机很少这样的 drawable-hdpi 里放高分辨率480x480，一般4-4.5英寸，视手机分辨率吧 drawable-xhdpi 加高 720x1280 一般5-5.5 drawable-xxhdpi 超高 1080x1920 一般6-6.5 drawable-xxhdpi 超超高 1440x2560 一般7以上的平板电脑啦 基本上，分辨率每加大一级，宽度和高度就要增加二分之一或三分之一像素。 为了适配不同分辨率的硬件 各视图的background属性、ImageView 和 ImageButton 的 src 属性、TextView 和 Button 四个方向的drawable*** 系列都可以引用图形文件</p><h4 id="_48-形状图形" tabindex="-1"><a class="header-anchor" href="#_48-形状图形" aria-hidden="true">#</a> 48-形状图形</h4><p>Shape图形又称形状图形，它用来描述常见的几何形状，包括矩形、圆角矩形、圆形、椭圆等等，可以节省美工不少工作量。 形状图形的定义文件放在drawable目录下，他是以shape标签为根节点的XML描述文件。根节点下定义6个节点：size尺寸、shroke描边、cornners圆角、solid填充、padding间隔、gradient渐变，各节点的属性值主要是长宽、半径、角度以及颜色等</p><ul><li>shape形状 <ul><li>根节点，默认rectangle矩形；椭圆oval此时corners节点失效；直线line此时必须设置stroke节点否则报错；ring圆环</li></ul></li><li>size尺寸 <ul><li>若无size节点则表示宽高与宿主视图一样大小</li><li>height 像素类型图形高度</li><li>width 像素类型图像宽度</li></ul></li><li>shroke描边 <ul><li>若无则表示不存在描边</li><li>color 颜色类型，描边颜色</li><li>dashGap 像素类型，每段虚线之间的间隔</li><li>dashWidth 像素类型，每段虚线的宽度，若dashGap或dashWidth有一个值为0则描边是实现</li><li>width 像素类型，描边厚度</li></ul></li><li>cornners圆角 <ul><li>若无则表示没有圆角</li><li>bottomLeftRadius 像素类型，左下圆角的半径</li><li>bottomRightRadius 像素类型，右下圆角的半径</li><li>topLeftRadius 像素类型，左上圆角的半径</li><li>topRightRadius 像素类型，右上圆角的半径</li><li>radius 像素类型，4个圆角的半径</li></ul></li><li>solid填充 <ul><li>若无则无填充色，color 颜色类型，内部填充色</li></ul></li><li>padding间隔 <ul><li>与周围边界的间隔，无则无，可以有top、bottom、left、right</li></ul></li><li>gradient渐变 <ul><li>颜色渐变如ps渐变</li><li>angle 整型，渐变的起始角度。为0时表示时钟的9点位置，逆时针增大</li><li>type 字符串类型，渐变类型：默认liner线性、radial放射、sweep滚动渐变即一个线段以某个端点为圆心做360度旋转</li></ul></li></ul><h4 id="_49-点9图片" tabindex="-1"><a class="header-anchor" href="#_49-点9图片" aria-hidden="true">#</a> 49-点9图片</h4><p>又称九宫格图片 当图片尺寸过小，此时背景自动拉伸填充导致图片变得模糊 xxx.9.png 设置好了之后就xml和java再改padding就不生效了</p><h4 id="_50-状态列表图形" tabindex="-1"><a class="header-anchor" href="#_50-状态列表图形" aria-hidden="true">#</a> 50-状态列表图形</h4><table><thead><tr><th style="text-align:left;">状态类型的属性名称</th><th style="text-align:left;">说明</th><th style="text-align:left;">适用的控件</th></tr></thead><tbody><tr><td style="text-align:left;">state_pressed</td><td style="text-align:left;">是否按下</td><td style="text-align:left;">按钮Button</td></tr><tr><td style="text-align:left;">state_checked</td><td style="text-align:left;">是否构选</td><td style="text-align:left;">复选框CheckBox、单选按钮RadioButton</td></tr><tr><td style="text-align:left;">state_focused</td><td style="text-align:left;">是否获取焦点</td><td style="text-align:left;">文本编辑框EditText</td></tr><tr><td style="text-align:left;">state_selected</td><td style="text-align:left;">是否选中</td><td style="text-align:left;">各控件通用</td></tr></tbody></table><h4 id="_51-复选框checkbox" tabindex="-1"><a class="header-anchor" href="#_51-复选框checkbox" aria-hidden="true">#</a> 51-复选框CheckBox</h4><p>xml-CheckBox-android:checked=&quot;true&quot; xml-CheckBox-android:button=&quot;@drawable/xxx&quot; java-setChecked 设置按钮的勾选状态 java-setButtonDrawable 设置左侧构选图标的图形资源 java-setOnCheckedChangeListener 设置勾选状态变化的监听器 java-isChecked 判断按钮是否勾选 CompoundButton继承于Button继承于TextView继承于View</p><h4 id="_52-开关按钮switch" tabindex="-1"><a class="header-anchor" href="#_52-开关按钮switch" aria-hidden="true">#</a> 52-开关按钮Switch</h4><p>实际开发经常使用CheckBox定一个开关，而不是用Switch</p><h4 id="_53-单选按钮radiobutton" tabindex="-1"><a class="header-anchor" href="#_53-单选按钮radiobutton" aria-hidden="true">#</a> 53-单选按钮RadioButton</h4><p>RadioGroup实际是一个布局，若不指定orientation则垂直布局 RadioButton</p><h4 id="_54-编辑框edittext" tabindex="-1"><a class="header-anchor" href="#_54-编辑框edittext" aria-hidden="true">#</a> 54-编辑框EditText</h4><p>属性: maxLength 文本允许输入的最大长度 hint 文本的内容 textColorHint 文本的颜色</p><h5 id="inputtype类型" tabindex="-1"><a class="header-anchor" href="#inputtype类型" aria-hidden="true">#</a> inputType类型：</h5><p>如下若同时使用多种文本类型，则可使用竖线拼接起来 text 文本 textPassword 文本密码 number 整型数 numberSigned 带符号的数字。允许开头带负号- numberDecimal 带小数的数字 numberPassword 数字密码 datetime 时间日期格式。除了数字外，还允许输入横线、斜杠、空格、冒号 date 日期格式。除了数字外，还允许输入横线和斜杠 time 时间格式。除了数字外，还允许输入冒号</p><h4 id="_55-焦点变更" tabindex="-1"><a class="header-anchor" href="#_55-焦点变更" aria-hidden="true">#</a> 55-焦点变更</h4><p>编辑框点击一次只触发焦点变更事件，第二次点击才触发点击事件 setOnFocusChangeListener</p><h4 id="_56-文本变化监听器" tabindex="-1"><a class="header-anchor" href="#_56-文本变化监听器" aria-hidden="true">#</a> 56-文本变化监听器</h4><p>addTextChangedListener 编辑框对象的此方法是注册文本监听器 TextWatcher 其接口名 beforeTextChanged 其接口要实现的方法-文本改变前触发 onTextChanged 其接口要实现的方法--文本改变过程中触发 afterTextChanged 其接口要实现的方法--文本改变后触发</p><h4 id="_57-提醒对话框alertdialog" tabindex="-1"><a class="header-anchor" href="#_57-提醒对话框alertdialog" aria-hidden="true">#</a> 57-提醒对话框AlertDialog</h4><p>提示、确认、选择 标题、内容、否认按钮、肯定按钮 AlertDialog.Builder builder = new AlertDialog.Builder(this); builder.setIcon设置对话框的标题图标； builder.setTitle(&quot;这是标题&quot;); builder.setMessage(&quot;这是消息&quot;); builder.setPositiveButton(&quot;是,积极的,残忍卸载&quot;, (dialog, which) -&gt; {</p><p>}); builder.setNegativeButton(&quot;否,消极的,我再想想&quot;, (dialog, which) -&gt; {</p><p>}); builder.create(); builder.show();</p><h4 id="_58-日期对话框datepickerdialog" tabindex="-1"><a class="header-anchor" href="#_58-日期对话框datepickerdialog" aria-hidden="true">#</a> 58-日期对话框DatePickerDialog</h4><p>虽然有 TextView 的类型<strong>type=date</strong>但很少有人这样手动输入完整日期； 虽然也有 DatePicker 日期<strong>选择器</strong>， 但更多时候用的是日期<strong>对话框</strong> DatePickerDialog xml-DatePicker-</p><ul><li>datePickerMode=&quot;spinner&quot; &amp;&amp; calendarViewShown=&quot;false&quot;</li><li>datePickerMode=&quot;calendar&quot;</li></ul>`,223);function _(f,b){const t=r("ExternalLinkIcon");return n(),h("div",null,[s,a("p",null,[e("现阶段仍有使用 java 开发 Android 的应用 kotlin 也是 jvm 开发语言 哔哩哔哩 动脑学院 讲师合伙人 宁传奇 "),a("a",c,[e("2022 最新 Android 基础教程，更新中"),i(t)]),a("a",u,[e("谷歌官方课程"),i(t)])]),p,a("p",null,[a("a",x,[e("谷歌开发者中文网站"),i(t)])]),g])}const v=d(o,[["render",_],["__file","Android.html.vue"]]);export{v as default};
